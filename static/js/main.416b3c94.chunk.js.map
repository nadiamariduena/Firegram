{"version":3,"sources":["comps/Title.js","firebase/config.js","hooks/useStorage.js","comps/progressBar.js","comps/UploadForm.js","hooks/useFirestore.js","comps/imageGrid.js","comps/Modal.js","App.js","index.js"],"names":["Title","className","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","console","log","div","initial","width","animate","UploadForm","types","type","onChange","e","selected","target","files","includes","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","map","key","layout","onClick","img","src","alt","opacity","transition","delay","Modal","selectedImg","classList","contains","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAeeA,EAbD,WACZ,OACE,yBAAKC,UAAU,SACb,wCACA,wCACA,0I,2CCgBNC,gBAfqB,CACnBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,8CAgBT,IAAMC,EAAiBR,YACjBS,EAAmBT,cAEnBU,EAAYV,YAAmBW,WAAWC,gBCwMjCC,EAnNI,SAACC,GAAS,MAaKC,mBAAS,GAbd,mBAapBC,EAboB,KAaVC,EAbU,OAcDF,mBAAS,MAdR,mBAcpBG,EAdoB,KAcbC,EAda,OAeLJ,mBAAS,MAfJ,mBAepBK,EAfoB,KAefC,EAfe,KAgN3B,OAlLAC,qBAAU,WAGR,IAAMC,EAAaf,EAAegB,IAAIV,EAAKW,MACrCC,EAAgBjB,EAAiBkB,WAAW,UAOlDJ,EAAWK,IAAId,GAAMe,GACnB,iBACA,SAACC,GA8BC,IAAIC,EAAcD,EAAKE,iBAAmBF,EAAKG,WAAc,IAiC7DhB,EAAYc,MAyEd,SAACG,GACCf,EAASe,KA3Ib,sBA6IE,8BAAAC,EAAA,sEACoBZ,EAAWa,iBAD/B,OACQhB,EADR,OAEQiB,EAAY3B,IAClBgB,EAAcY,IAAI,CAAElB,MAAKiB,cACzBhB,EAAOD,GAJT,8CAOD,CAACN,IAmBG,CAAEE,WAAUI,MAAKF,U,OCxFXqB,EAxIK,SAAC,GAAuB,IAArBzB,EAAoB,EAApBA,KAAM0B,EAAc,EAAdA,QAAc,EAgBf3B,EAAWC,GAA7BM,EAhBiC,EAgBjCA,IAAKJ,EAhB4B,EAgB5BA,SAmEb,OAlEAyB,QAAQC,IAAI1B,EAAUI,GAmDtBE,qBACE,WAGMF,GAEFoB,EAAQ,QAGZ,CAACpB,EAAKoB,IAcN,kBAAC,IAAOG,IAAR,CACE5C,UAAU,eACV6C,QAAS,CAAEC,MAAO,GAClBC,QAAS,CAAED,MAAO7B,EAAW,QCOpB+B,EAtGI,WAAM,MAEChC,mBAAS,MAFV,mBAEhBD,EAFgB,KAEV0B,EAFU,OAqBGzB,qBArBH,mBAqBhBG,EArBgB,KAqBTC,EArBS,KA4BjB6B,EAAQ,CAAC,YAAa,YAAa,aAAc,aA6BvD,OACE,8BAEE,+BACE,2BAAOC,KAAK,OAAOC,SA5BH,SAACC,GAIrB,IAAIC,EAAWD,EAAEE,OAAOC,MAAM,GAI1BF,GAAYJ,EAAMO,SAASH,EAASH,OACtCT,EAAQY,GAERjC,EAAS,OAGTqB,EAAQ,MAMRrB,EAAS,6DASP,qCAGF,yBAAKpB,UAAU,UACZmB,GAAS,yBAAKnB,UAAU,SAASmB,GAMjCJ,GAAQ,6BAAMA,EAAKW,MAwBnBX,GAAQ,kBAAC,EAAD,CAAaA,KAAMA,EAAM0B,QAASA,O,OC9DpCgB,EArCM,SAAC7B,GAAgB,IAAD,EACXZ,mBAAS,IADE,mBAC5B0C,EAD4B,KACtBC,EADsB,KAoBnC,OAjBApC,qBAAU,WACR,IAAMqC,EAAQlD,EACXkB,WAAWA,GACXiC,QAAQ,YAAa,QAErBC,YAAW,SAAC/B,GACX,IAAIgC,EAAY,GAChBhC,EAAKiC,SAAQ,SAACC,GACZF,EAAUG,KAAV,2BAAoBD,EAAIE,QAAxB,IAAgCC,GAAIH,EAAIG,SAE1CT,EAAQI,MAGZ,OAAO,kBAAMH,OAEZ,CAAChC,IAEG,CAAE8B,SCuDIW,EAzEG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACXZ,EAASD,EAAa,UAAtBC,KAGR,OACE,yBAAK1D,UAAU,YACZ0D,GACCA,EAAKa,KAAI,SAACN,GAAD,OAGP,kBAAC,IAAOrB,IAAR,CACE5C,UAAU,WACVwE,IAAKP,EAAIG,GACTK,QAAM,EA4CNC,QAAS,kBAAMJ,EAAeL,EAAI5C,OAElC,kBAAC,IAAOsD,IAAR,CACEC,IAAKX,EAAI5C,IACTwD,IAAI,eACJhC,QAAS,CAAEiC,QAAS,GACpB/B,QAAS,CAAE+B,QAAS,GAEpBC,WAAY,CAAEC,MAAO,WC9BpBC,EAnCD,SAAC,GAAqC,IAAnCX,EAAkC,EAAlCA,eAAgBY,EAAkB,EAAlBA,YAc/B,OACE,kBAAC,IAAOtC,IAAR,CACE5C,UAAU,WACV0E,QAdgB,SAACtB,GACfA,EAAEE,OAAO6B,UAAUC,SAAS,aAC9Bd,EAAe,OAafzB,QAAS,CAAEiC,QAAS,GACpB/B,QAAS,CAAE+B,QAAS,IAEpB,yBAAKF,IAAKM,EAAaL,IAAI,mBCkClBQ,MAtDf,WAAgB,IAAD,EACyBrE,mBAAS,MADlC,mBACNkE,EADM,KACOZ,EADP,KAeb,OACE,yBAAKtE,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWsE,eAAgBA,IAC1BY,GACC,kBAAC,EAAD,CAAOA,YAAaA,EAAaZ,eAAgBA,MCtBzDgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.416b3c94.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram</h1>\n      <h2>Test One</h2>\n      <p>\n        No copyright infringement intended, All pictures used in this exercise\n        are only for educational purposes.\n      </p>\n    </div>\n  );\n};\n\nexport default Title;\n","import * as firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport \"firebase/firestore\";\n// the asteric _* means , import everything\n//\n\n// Your web app's Firebase configuration\n//-----------------------------------------\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCsLVXPG8BXTAVIg_oOiQLp2yUR0zWDzKE\",\n  authDomain: \"melitta-firegram.firebaseapp.com\",\n  databaseURL: \"https://melitta-firegram.firebaseio.com\",\n  projectId: \"melitta-firegram\",\n  storageBucket: \"melitta-firegram.appspot.com\",\n  messagingSenderId: \"789625095364\",\n  appId: \"1:789625095364:web:5db97b10932377ce29f591\",\n};\n//-----------------------------------------\n//\n//\n//-----------------------------------------\n// HERE WE ARE INITIALIZING THE *** APP ***\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n//-----------------------------------------\n//\n//\n//-----------------------------------------\n// HERE WE INITIALIZE the 2 kind of SERVICES:\n// STORAGE SERVICE AND THE FIRESTORE SERVICE\n//\nconst projectStorage = firebase.storage();\nconst projectFirestore = firebase.firestore();\n// the Time stamp the file is going to have, so that we cn organize it chronologically\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\n// So whenever you want to create a new time stamp you can just invoke the function: timestamp\n// because this is a function: timestamp that invokes this:  firebase.firestore.FieldValue.serverTimestamp;\n//  Now EXPORT the timestamp, line 44 : timestamp };\n// go back to useStorage.js\n//-----------------------------------------\n//\n//EXPORT IT\n//\nexport { projectStorage, projectFirestore, timestamp };\n","import { useState, useEffect } from \"react\";\n//\nimport {\n  projectStorage,\n  projectFirestore,\n  timestamp,\n} from \"../firebase/config\";\n//\n/*\n\n\n            - Use in REACT are just a way a small chunk of reusable code\n              then those HOOKS can be used in whatever components need them.\n\n            -Our HOOK is basically just a function, just as all hooks are and \n             this function will be responsible for handling our FILES UPLOADS,\n             and then returning some useful values about that upload, such as\n              the UPLOAD progress, any errors and the image URL after its \n              uploaded.\n              \n\n*/\n// the (file) here is connected to step 5 inside the UploadForm.js\nconst useStorage = (file) => {\n  /*\n\n\n\n              // Here you are going to create 3 pieces of the state, \n              this useState is connected to the first line of this file,\n              here you are requiring from react that specific library:\n\n              import { useState, useEffect } from \"react\";\n\n\n*/\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n  //   this is the img URL i will get back from storage, after the image has fully uploaded\n  //\n  /*\n                  useEffect(()=>{\n\n                   }, [file])\n\n\n                This FUNCTION inside useEffect, is going to fire every time \n                this dependency: [file]  changes, SO every time we have a new  (file) => {  \n                 value, we are going to run the code inside the function to upload that file.\n\n     */\n\n  useEffect(() => {\n    //the HOOK\n    // This will create a reference to the file inside the default FIREBASE STORAGE bucket\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection(\"images\");\n    //\n    //\n    //\n\n    // the following line :  storageRef.put(file)  ,means that  the (file) is going to be put/or downloaded to\n    // the reference projectStorage, here: projectStorage.ref(file.name);\n    storageRef.put(file).on(\n      \"state_changed\",\n      (snap) => {\n        /*         \n      \n      \n\n                DESCRIPTION:            **         storageRef.put(file).on(\"state_changed\"\n    \n                                        **     storageRef.put(file)  THIS IS Asynchronous, \n                                            and it will take some time to fulfil the task\n                                     And you can attach LISTENER to it, this listener is going to \n                                    fire functions when certain events happens(clicking for example)\n\n    \n                                        **            on(\"state_changed\"\n\n                                      means:  that whatever the state of the uploaded changed, whenever the\n                                      progress changed or is complete, we are going to fire a function, that \n                                      function will be the 2 argument ...\n\n\n                                     * *                    (snap)\n                                    inside the function with 2 argument you have the snap shot:\n                                     the snap shot is basically a snapshot in time of the UPLOAD\n                                     in that moment in time, this state change event might happen \n                                     2 or 4 etc times, during the cycle of the UPLOAD, so we might FIRE this\n                                     function several times while its being uploaded.\n\n   \n    */\n\n        let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n        /*\n\n\n\n\n                   EXPLANATION:     **     let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n    \n                                    **     (snap.bytesTransferred / snap.totalBytes)\n                                    **      bytesTransferred  reserved word, this is a property in the snapshot,\n                                            that tells you how many bytes have being transferred at this moment in time\n                                            when the FUNCTION is fired, AND that divided by snap.totalBytes which\n                                            represents the total bytes in the file the TOTAL file size and then you\n                                            TAKE these 2 and times them (*) by 100, so this is just a formula for \n                                            percentage.\n\n                                            We take the bytes transferred, divide that by the total bytes and times \n                                            it by 100 to get a percentage, and that will now be the percentage of \n                                            the UPLOAD\n\n\n                                      \n\n\n\n\n\n     */\n        //\n        //\n        // setProgress(percentage); , this is going to be now the percentage of the UPLOAD\n        // now what you will do next, is set the value of this: [progress, setProgress] TO BE percentage\n        // and that will basically be a number between 0 and 100\n        setProgress(percentage);\n        //\n        /*\n             EXPLANATION:    **        },\n                                        (err) => {\n                                              setError(err);\n                                        }\n                                      );\n      \n                   After the setProgress, you have to set up a third argument \n                   function, this function will fire if there s an error with the UPLOAD\n                   AND if that is the case, all we want to do is SET THE ERROR \n                   using this function up here:\n                   \n                   \n                             **  setError(err);\n                   \n                   and we'll pass in this error:\n                   \n                            **   (err);\n                   \n                   now eventually we are going to \"return\" that down on the bottom of\n                the hook (later) like so:   return { progress, url, error };\n                \n                so that in the component we use in we can do something with that\n                error if we want to.   And finally we can pass in another argument and this argument\n                is also a function,  which is going to fire when the upload is fully complete\n        \n                                    },\n                                    async () => {\n                                        const url = await storageRef.getDownloadURL();\n                                        setUrl(url);\n                                        }\n                                    );\n                                                \n\n                I am going to mark this as an ASYNC function, because we are going to use AWAIT inside\n                this function, now what i want to do at this point, is get the URL of the image that has\n                just been uploaded\n\n                              **      getDownloadURL()\n\n                 This line 203:\n                 const url = await storageRef.getDownloadURL();\n\n                 MEANS :    we want the storage.ref , So what it is doing, is that its taking the \n                 storage ref on line 54: const storageRef , so it finds the file we just uploaded:\n\n                 projectStorage.ref(file.name); \n                 \n                 and then it  get the download URL : \n                 \n                 .getDownloadURL();  \n                 \n                 to then we are storing it inside this variable: const url =  , \n                from the line 203:  const url = await storageRef.getDownloadURL(); \n\n                Now all we need to do is set :     setUrl(url);  and pass in the url like so:    (url);\n\n                This ULR doesn't OVERWRITE the url on the line 37 :   const [url, setUrl] = useState(null);\n                BECAUSE its inside a separate SCOPE inside this function here:\n\n                                                  async () => {\n                                                    const url = await storageRef.getDownloadURL();\n                                                    setUrl(url);\n                                                    }\n                                                    );\n\n                we are only updating that value right here:\n                                                         setUrl(url);\n\n      */\n      },\n      (err) => {\n        setError(err);\n      },\n      async () => {\n        const url = await storageRef.getDownloadURL();\n        const createdAt = timestamp();\n        collectionRef.add({ url, createdAt });\n        setUrl(url);\n      }\n    );\n  }, [file]); //this \"file\" is how you transport the hook info to other components\n\n  /*\n\n                                     **    THE LAST THING TO DO  ***\n\n\n                                    WE have to return the values that we just finished\n                                    using in the function useEffect, these values are:\n\n                                        const [progress, setProgress] \n                                        const [error, setError] \n                                        const [url, setUrl] \n\n                                    \n\n\n*/\n\n  return { progress, url, error };\n};\n//  you have to export this hook so that you can use all the values you have inside of it,in another component.\nexport default useStorage;\n\n/*\n                                                ------------------\n                                **        AFTER SETTING UP ALL THIS HOOK    **\n                                                ------------------\n\n                                     \n\n\n                              useStorage\n                                    \n                            What we will do now , is create a NEW COMPONENT for a progress\n                            BAR which will show the progress of the upload and we will use the HOOK\n                            in that INSTEAD. so create a new COMPONENT, CALL IT : progressBar.js\n\n\n\n\n\n\n                                                ------------------\n                                **                  CLEAN VERSION              **\n                                                ------------------\n\n\n\n\n\n\n\n\nimport { useState, useEffect } from \"react\";\n//\n//\n//\nimport { projectStorage } from \"../firebase/config\";\n//\n// the HOOK ----------\nconst useStorage = (file) => {\n  \n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n   // ----------\n  useEffect(() => {\n    //\n    const storageRef = projectStorage.ref(file.name);\n\n    storageRef.put(file).on(\n      \"state_changed\",\n      //\n      (snap) => {\n        let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n        //\n        setProgress(percentage);\n        //\n      },    // ----------\n      (err) => {\n        setError(err);\n      },\n      async () => {\n        const url = await storageRef.getDownloadURL();\n        setUrl(url);\n      }   // ----------\n    );\n  }, [file]);\n\n  return { progress, url, error };\n};\nexport default useStorage;\n*/\n\n/*\n\n\n\n                                     ***       SHOW THE IMAGES we UPLOADED  ***\n\n\n                                                NEXT thing we will do is cycle the images\n                                                we have inside the STORAGE and ADD the to \n                                                the DATABASE.\n\n\n                             1_ we need to store the URL's of the images inside the DATABASE,\n                                so that we can use the data to show the images in he browser.\n\n                            2_  Go back to the userStorage HOOK, line 204:\n                                  async () => {\n                                    const url = await storageRef.getDownloadURL();\n                                    setUrl(url);\n\n                            3_ at that point we want to save this URL to the firestore\n                            4_ WHAT we want is to make a document out of the images that we have \n                                    in storage with of course the URL's\n\n                            5_ import the project FIRESTORE from the config.js we have here (we\n                                have the project firestore EXPORTED on the bottom )\n                            6_  to export it, add the following to this line in useStorage.js:\n\n                            Add this:\n                            projectFirestore\n                            to this:\n                            import { projectStorage } from \"../firebase/config\";\n                            it should look like so:\n\n                            import { projectStorage, projectFirestore } from \"../firebase/config\";\n\n                            NEXT...\n\n                            7_ WE NEED to make a reference to a CoLLECTION that we want to save\n                            the document to:\n\n                            8_ go to line 56 in useStorage.js and add the following:\n\n                                const collectionRef = projectFirestore.collection(\"images\");\n\n                            9_ then  go to line 206 in useStorage.js and add the following:\n\n                            the above obj represent \"this document we just mentioned in step 4\"\n\n                             collectionRef.add({ url, createdAt });\n\n                             its going to give you and error because to use this, you have to \n                             go to the config.js and create the function linked to time stamp\n                             , so follow these steps i wrote there and then go back to the\n                             useStorage.js and import it in the beginning of the file like so:\n\n                             import {\n                                 projectStorage,\n                                    projectFirestore,\n                                                         timestamp,\n                        } from \"../firebase/config\";\n\n                **        AND THEN \n                         go to line 210 in the same file you just imported the stuff, and add the\n                         following:\n                           const createdAt = timestamp();\n                           \n                           ** remember timestamp(); is a function in the config, it will\n                           help you to keep a timestamp inprint of when the user uploaded\n                           the image and it will help you to keep it chronologically.\n\n                           NOW you can use the 2timestamp\"\n\n                        line 211:     collectionRef.add({ url, createdAt });\n\n\n                        So once the UPLOAD is completed, line 211 useStorage:  createdAt });\n                        we have the url, line 209 useStorage:   const url =   ,\n                        we created a new document , line 211:  collectionRef.add ,\n                        inside the collection , line 60:  = projectFirestore.collection(\"images\");\n                                        to match that images that s just been uploaded\n                                        and we are storing a URL, line 211:\n                                        \n                                        add({ url, createdAt });\n                                        \n                                        of that image and when\n                                        it was created:\n                                        \n                                         \n                                        createdAt });\n\n                                        okay thats all we are doing here\n\n                                 ***       NOW go back to the firebase STORAGE and delete all the images\n                                 because they dont have the documents associated with them inside the firestore.\n\n                                 - Try to upload A NEW image\n\n                                 - once its UPLOADED, refresh the firebase page and then go to the\n                                 database inside the CLOUD Firestore, you should have a collection\n                                 called images and a code and the url \n\n\n                                 This MEANS that we can now LISTEN to this COLLECTION from our website to get all\n                                 of the urls in real time as they are added into our project, now the next step will be\n                                 create a NEW custom HOOK called : USE FIRESTORE\n\n*/\n","import React, { useEffect } from \"react\";\nimport useStorage from \"../hooks/useStorage\";\nimport { motion } from \"framer-motion\";\n\n//\n//\n//\nconst ProgressBar = ({ file, setFile }) => {\n  /*\n    \n\n                        ProgressBar = ()   \n\n                        1_ Inside of the ProgressBar = () , you need to use the useStorage HOOK, but first of all\n                        you need to get the props that you just passed inside the UploadForm.js (line 103) :\n\n                                        **      file={file} setFile={setFile}\n    \n    \n               \n    \n    */\n\n  const { url, progress } = useStorage(file);\n  console.log(progress, url);\n\n  /*\n    \n\n                        const { url, progress } = useStorage(file);   \n\n                        2_ here we are going to use the useStorage HOOK, so you are going to say const and you\n                        are going to get back from this: { url, once the upload is complete, and also the progress\n                        of the UPLOAD, so remember we return those things here from the useStorage:\n\n                                                **   return { progress, url, error };\n\n                                        We are not using the ERROR yet, we are going to set that equal over here\n                                        , to use storage like so and pass in the file.\n\n                                        SO the MINUTE that we do this, this HOOK: useStorage ,  is going to fire\n                                        this things right here (line:227  from the useStorage.js):  \n\n                                        return { progress, url, error };\n    \n                                    that is inside the useEffect, and its going to take the file, create a REFERENCE\n                                    CHECK (line:55  from the useStorage.js): \n\n                                **   projectStorage.ref(file.name);\n\n                                and try to upload that file  (line:62  from the useStorage.js):  \n                                \n                                **  .put(file).on(\n    \n                                    and in that moment in time we get values back for progress and then when \n                                    its DONE the URL as well.\n                                    --------------------------------------------------------\n\n\n                                                            *\n                                                   --------------------\n                                          REMOVE THE PROGRESS BAR once  we reach the 100%\n                                                    --------------------\n\n\n                                                 seEffect(() => {  }, [url]);\n  \n                           Here you will pass a FUNCTION that will run when the URL changes\n\n\n\n                                                            *                                    \n\n    */\n\n  useEffect(\n    () => {\n      // if we have a valid value (thats is not null), at that point we want  to set the file and\n      // set the file to be EQUAL to NULL\n      if (url) {\n        //   this if condition, will make the PROGRESS BAR disappear after the download of the file is completed\n        setFile(null);\n      }\n    },\n    [url, setFile]\n    // You need to add the SETFILE here because you are using it inside the statement\n  );\n  //\n  //\n  //                                    -----------------------------------------------------------\n  return (\n    /*\n\n                                        PROGRESS BAR animation\n\n*/\n\n    // before the animation:     <div className=\"progress-bar\" style={{ width: progress + \"%\" }}></div>\n    <motion.div\n      className=\"progress-bar\"\n      initial={{ width: 0 }}\n      animate={{ width: progress + \"%\" }}\n    ></motion.div>\n    /*\n\n\n\n\n\n\n                                                    style={{ width: progress + \"%\" }}>    \n       \n       \n                                    CONCERNS the progression bar, when you will download an image, while\n                                    the image is progressing the width will grow in the porcentage. the \n                                    height of the with is in the css\n                                    --------------------------------------------------\n\n                               **    REMOVING THE PROGRESS bar once it reaches the 100%\n                               as we dont want that it remains there.\n\n                               to remove it, we need to SET the value of file back to null\n                               \n                               line 7:\n                               ({ file, \n\n                               because remember we only show the PROGRESS BAR if the \"file\" has a value\n                               (if the user downloaded something). SO we can set the value back to null\n                               by using this function:\n\n                               line: 7:\n                               setFile })\n\n                               we will do that when we will have a URL to use, because at that point we \n                               know the file is fully uploaded, because we only get that FILE after \n                               the upload is COMPLETED.\n\n\n\n*/\n  );\n};\n\nexport default ProgressBar;\n\n/*\n\n\n\n                                     ***       SHOW THE IMAGES we UPLOADED  ***\n\n\n                                                NEXT thing we will do is cycle the images\n                                                we have inside the STORAGE and ADD the to \n                                                the DATABASE.\n\n\n                             1_ we need to store the URL's of the images inside the DATABASE,\n                                so that we can use the data to show the images in he browser.\n\n                            2_  Go back to the userStorage HOOK, line 204:\n                                  async () => {\n                                    const url = await storageRef.getDownloadURL();\n                                    setUrl(url);\n\n                            3_ at that point we want to save this URL to the firestore\n                            4_ WHAT we want is to make a document out of the images that we have \n                                    in storage with of course the URL's\n\n                            5_ import the project FIRESTORE from the config.js we have here (we\n                                have the project firestore EXPORTED on the bottom )\n                            6_  to export it, add the following to this line in useStorage.js:\n\n                            Add this:\n                            projectFirestore\n                            to this:\n                            import { projectStorage } from \"../firebase/config\";\n                            it should look like so:\n\n                            import { projectStorage, projectFirestore } from \"../firebase/config\";\n\n                            NEXT...\n\n                            7_ WE NEED to make a reference to a CoLLECTION that we want to save\n                            the document to:\n\n                            8_ go to line 56 in useStorage.js and add the following:\n\n                                const collectionRef = projectFirestore.collection(\"images\");\n\n                            9_ then  go to line 206 in useStorage.js and add the following:\n\n                            the above obj represent \"this document we just mentioned in step 4\"\n\n                             collectionRef.add({ url, createdAt });\n\n                             its going to give you and error because to use this, you have to \n                             go to the config.js and create the function linked to time stamp\n                             , so follow these steps i wrote there and then go back to the\n                             useStorage.js and import it in the beginning of the file like so:\n\n                             import {\n                                 projectStorage,\n                                    projectFirestore,\n                                                         timestamp,\n                        } from \"../firebase/config\";\n\n                **        AND THEN \n                         go to line 210 in the same file you just imported the stuff, and add the\n                         following:\n                           const createdAt = timestamp();\n                           \n                           ** remember timestamp(); is a function in the config, it will\n                           help you to keep a timestamp inprint of when the user uploaded\n                           the image and it will help you to keep it chronologically.\n\n                           NOW you can use the 2timestamp\"\n\n                        line 211:     collectionRef.add({ url, createdAt });\n\n\n                        So once the UPLOAD is completed, line 211 useStorage:  createdAt });\n                        we have the url, line 209 useStorage:   const url =   ,\n                        we created a new document , line 211:  collectionRef.add ,\n                        inside the collection , line 60:  = projectFirestore.collection(\"images\");\n                                        to match that images that s just been uploaded\n                                        and we are storing a URL, line 211:\n                                        \n                                        add({ url, createdAt });\n                                        \n                                        of that image and when\n                                        it was created:\n                                        \n                                         \n                                        createdAt });\n\n                                        okay thats all we are doing here\n\n                                 ***       NOW go back to the firebase STORAGE and delete all the images\n                                 because they dont have the documents associated with them inside the firestore.\n\n                                 - Try to upload A NEW image\n\n                                 - once its UPLOADED, refresh the firebase page and then go to the\n                                 database inside the CLOUD Firestore, you should have a collection\n                                 called images and a code and the url \n\n\n                                 This MEANS that we can now LISTEN to this COLLECTION from our website to get all\n                                 of the urls in real time as they are added into our project, now the next step will be\n                                 create a NEW custom HOOK called : USE FIRESTORE\n\n\n\n\n\n                                                    ----------------------------------\n\n                                                create a NEW custom HOOK called : USE FIRESTORE\n\n                                                    ----------------------------------\n\n\n\n\n                                               Create a new component inside the comps folder and\n                                                    call it : imageGrid.js\n\n\n                                                    once you created the following, you will want to access\n                                                    the DATA from our firestore database:\n\n                                                    import React from \"react\";\n\n                                                        const ImageGrid = () => {\n                                                        return <div className=\"img-grid\">images</div>;\n                                                        };\n\n                                                        export default ImageGrid;\n\n\n                                                TO ACCESS it, we could import the sdk into the grid file and \n                                                grab the data that way but instead, we are going to create another\n                                                 HOOK to do all the jeavy lifting for US, that way we make our \n                                                 code more reusable  any time we want to get FIRESTORE data from\n                                                 a collection we could just use  the use firestore HOOK that    we\n                                                 are going to create.\n\n                                                 go to the hooks folder and create a file called: useFirestore.js\n\n\n                                                 continue there\n\n\n\n\n\n\n\n*/\n","import React from \"react\";\n// connected to the 5__ step\nimport { useState } from \"react\";\nimport ProgressBar from \"./progressBar\";\n\n// 1__\nconst UploadForm = () => {\n  // 5__  ------\n  const [file, setFile] = useState(null);\n  /* useState(null); \n is NULL to begin with because there s no image before you click on \n the button to see what you have in your local, so when you click on the button which is the :\n       <input type=\"file\" onChange={changeHandler} />  , you launch the function which is onChange={changeHandler},\n       from that moment if the user choose an image it s going to be true, if the user 'cancels' it s going\n       to be undefined.\n\n*/\n\n  // The error that will be shown if the user chooses an incorrect type of file.\n  // this error is connected to :\n  /*\n  else {\n      setFile(null);\n    }\n  \n  */\n  //  8:___\n  const [error, setError] = useState();\n\n  // -----\n  // the allowed FILE types:\n  // ------\n  // 7__\n  //\n  const types = [\"image/png\", \"image/jpg\", \"image/jpeg\", \"image/gif\"];\n  //\n  //\n\n  // 2_\n  const changeHandler = (e) => {\n    // with this you will select one file: e.target.files[0];\n    // to see what you have selected console.log(selected)\n    // 4_\n    let selected = e.target.files[0];\n    //\n    //\n    // _6  You need this statement to verify 'if or what' type of file the user upload.\n    if (selected && types.includes(selected.type)) {\n      setFile(selected);\n      // 11\n      setError(\" \");\n    } else {\n      // connected to step 5__\n      setFile(null);\n\n      // if the file that the user wants to upload don't correspond to what is inside the type: types\n      // IF SO, then show and error, here the error will be just resetting to null again, you can also send an alert\n      // but alerts are a ugly :)     alert(\"choose a correct file\");\n      // 9__\n      setError(\"Please select an image file (png or jpeg ,jpeg or gif\");\n    }\n  };\n\n  return (\n    <form>\n      {/* 3__ */}\n      <label>\n        <input type=\"file\" onChange={changeHandler} />\n        <span>{/* <ion-icon name=\"add-circle-outline\"></ion-icon> */} +</span>\n      </label>\n      {/* __10__ */}\n      <div className=\"output\">\n        {error && <div className=\"error\">{error}</div>}\n        {/* AFTER you type the above, go to the browser and try uplading a mp3 and then an image\n        You will see that you will still have an error:   (\"Please select an image file (png or jpeg or jpeg\") \n                  {file && <div>{file.name}</div>\n        \n        */}\n        {file && <div>{file.name}</div>}\n\n        {/*          \n        \n                      You will create the following after having created the hooks inside \n                      the useStorage.js and then after creating the progressBar.js\n                      \n                            {file && <ProgressBar />}\n\n                            The above will only shows if it turns to true, which means that if the \n                            user selected a file THEN \n                  SHOW THE progress bar. after this you need to pass the \"file\"  info/data (line: 9) to the child by using the \n                  props like so:  \n\n                                    **      file={file}\n\n                              AND ALSO the setFile,\n                              \n                                   **       setFile={setFile}\n                              \n                              so that when the progress is complete , we can set the file\n                              back to null and then the progress bar doesnt show again.\n                      */}\n\n        {file && <ProgressBar file={file} setFile={setFile} />}\n      </div>\n    </form>\n  );\n};\n\nexport default UploadForm;\n\n//  input type=\"file\"\n// is going to allow users to upload images in the page\n","import { useState, useEffect } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useState([]);\n\n  useEffect(() => {\n    const unsub = projectFirestore\n      .collection(collection)\n      .orderBy(\"createdAt\", \"desc\") //the order of the images , descendent order ect\n      // again the snap shot at real time\n      .onSnapshot((snap) => {\n        let documents = []; //documents = []; because its empty from the start\n        snap.forEach((doc) => {\n          documents.push({ ...doc.data(), id: doc.id });\n        });\n        setDocs(documents);\n      });\n    //\n    return () => unsub();\n    //\n  }, [collection]);\n\n  return { docs };\n};\n\n/*\n                                            *\n\n                    GO TO THE END OF THE progressBar.js to read the first part\n                        \n\n\n                  -  (collection) => the collection you want to get DOCUMENTS from\n                  - In our case it s going to g, the images collection\n\n\n\n*/\n\nexport default useFirestore;\n","import React from \"react\";\nimport useFirestore from \"../hooks/useFirestore\";\nimport { motion } from \"framer-motion\";\n//\n\nconst ImageGrid = ({ setSelectedImg }) => {\n  const { docs } = useFirestore(\"images\");\n  // console.log(docs);\n\n  return (\n    <div className=\"img-grid\">\n      {docs &&\n        docs.map((doc) => (\n          //\n          //\n          <motion.div\n            className=\"img-wrap\"\n            key={doc.id}\n            layout\n            /* \n\n\n\n\n                                            whileHover={{ opacity: 1 }}\n\n            // this {{}} because you are going to use some css properties\n            // remember the opacity in the css is at : 0.8\n            \n            \n            THE LAYOUT attr is going to make that when you upload an image, instead of pushing the other images\n            in a rude way, the layout attr is going to make it smoothly  \n            \n            Now do the same with the <img like so:\n\n                 <motion.img\n              src={doc.url}\n              alt=\"uploaded pic\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 1 }}\n            />\n            \n            NOW GO TO THE PREGRESS BAR to animate it.\n            */\n\n            /* -------------------------------------------------------------------------\n            \n            \n            So now whenever you click on an image, you are updating the value of this:\n \n            line 8 App.js:\n            const [selectedImg,    \n              \n            SO  you are updating the value with the URL of that image, now you can pass it through here:\n\n\n                                   <Modal selectedImg={selectedImg} />\n           \n\n\n            */\n            onClick={() => setSelectedImg(doc.url)}\n          >\n            <motion.img\n              src={doc.url}\n              alt=\"uploaded pic\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              // it will take one sec until the img appears\n              transition={{ delay: 1 }}\n            />\n          </motion.div>\n        ))}\n    </div>\n  );\n};\n\nexport default ImageGrid;\n","import React from \"react\";\nimport { motion } from \"framer-motion\";\n//\n//\n\nconst Modal = ({ setSelectedImg, selectedImg }) => {\n  // props by destructuring : ( {selectedImg} ) => {}\n\n  const handleClick = (e) => {\n    if (e.target.classList.contains(\"backdrop\")) {\n      setSelectedImg(null);\n      /*                    only if the e event . target contains the class 'backdrop, only \n                            then this is going to fire ,if you notice when you click on the \n                            picture, it wont close but from the moment you click around it will close\n                            \n                            */\n    }\n  };\n\n  return (\n    <motion.div\n      className=\"backdrop\"\n      onClick={handleClick}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <img src={selectedImg} alt=\"enlarged pic\" />\n\n      {/*\n        IN the case you want to animate the image, lets say you want the image droping from the top, then\n        you can use this, if you want the img coming from the side, change the y for the x.\n      \n      <motion.img src={selectedImg} alt=\"enlarged pic\"\ninitial={{y: \"-100vh\"}}\nanimate={{y: 0}}\n/> */}\n    </motion.div>\n  );\n};\n\nexport default Modal;\n\n/*\n\nAdding the Animtion with FRAMER MOTION packet\n\nA production ready motion library\nfor React.\n\nYou have to install the framer motion dependency\n\n- npm install framer-motion\n\nThe first things you are going to animate is the hover, when you hover an image \nfor example.\n\n1_ go to the image grid to do this\n2_ Once there, import the following like so : import { motion } from \"framer-motion\";\n\n3_ add motion to the opening of the tags of the divs you want to animate like so:\n\n\n\n\n        <motion.div  className=\"img-wrap\"  key={doc.id}  onClick={() => setSelectedImg(doc.url)}>\n\n                 <img src={doc.url} alt=\"uploaded pic\" />\n\n                            </motion.div>\n\n\n\n*/\n","import React, { useState } from \"react\";\nimport Title from \"./comps/Title\";\nimport UploadForm from \"./comps/UploadForm\";\nimport ImageGrid from \"./comps/imageGrid\";\nimport Modal from \"./comps/Modal\";\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n  // useState(null); because when we first upload the page, we have not yet selected an image\n\n  /* \n\n\nwe need to update this value: selectedImg inside:   <ImageGrid />  when we click on an image so\ncopy this : setSelectedImg and paste it inside the  : <ImageGrid /> like so:  \n<ImageGrid setSelectedImg={setSelectedImg} />\n\nYou are of course passing it as a props, now go back to the ImageGrid and accept it as a props, like so:\n\nconst ImageGrid = ({ setSelectedImg }) => {\n */\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImg && (\n        <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n      )}\n      {/* \n      \n\n       {selectedImg &&\n\n\n      what this means is: i want to check for selectedImg and\n      && only if this TRUE:  {selectedImg && ,  will this then will be rendered:\n      \n      <Modal selectedImg={selectedImg}\n\n      The only problem NOW is that after you click , you are not able to close it.\n      \n      to allow closing it, you will attach a CLICK EVENT HANDLER to the backdrop,\n      so that when you clik on that it closes the MODAL.\n\n      1- attach the event to the backdrop div inside the Modal.js\n      2_ use the setSelectedImg  and set it up to null again but first you need to pass it as a props to use it there:\n\n                                      like so :\n                                      setSelectedImg={setSelectedImg} />\n        from this file, line 28:\n       <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n      \n      \n      \n      */}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}